volumes:
  volume-pgdata:

services:
  revproxy:
    container_name: revproxy
    image: nginx:alpine
    ports:
      - 80:80
    volumes:
      - ./revproxy.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
      adminer:
        condition: service_started
    networks:
      shorturl:

  frontend:
    container_name: frontend
    build:
      context: frontend
      dockerfile: Dockerfile
    image: ghcr.io/superdarki/shorturl-frontend
    environment:
      API_URL: "http://localhost/api"
    depends_on:
      backend:
        condition: service_started
    networks:
      shorturl:

  backend:
    container_name: backend
    build:
      context: backend
      dockerfile: Dockerfile
    image: ghcr.io/superdarki/shorturl-backend
    environment:
      DATABASE_URL: "postgresql://shorturl:shorturl@db/shorturl"
    depends_on:
      db:
        condition: service_healthy
    networks:
      shorturl:

  db:
    container_name: db
    image: postgres
    environment:
      POSTGRES_USER: "shorturl"
      POSTGRES_PASSWORD: "shorturl"
      POSTGRES_DATABASE: "shorturl"
    volumes:
      - volume-pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DATABASE}"]
      interval: 5s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      shorturl:

  adminer:
    container_name: adminer
    image: adminer
    depends_on:
      db:
        condition: service_healthy
    networks:
      shorturl:

networks:
  shorturl: